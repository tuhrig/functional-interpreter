; Utils
(define mylength (lambda (L) (if (eq? L null) 0 (+ (mylength   (rest L)) 1))))
(define (append2 l1 l2) (if (eq? l1 null) l2 (cons (first l1) (append2 (rest l1) l2))))
(define (append3 a b c) (append2 a (append2 b c)))
(define (myfilter pred list) (if (eq? list null) null (if (pred (first list)) (cons (first list) (myfilter pred (rest list))) (myfilter pred (rest list)))))

; Quicksort
(define (quicksort list)
	(if (<= (mylength list) 1) 
		list 
	; else	
                (let ((pivot (first list))) 
                  (append3 
			(quicksort (myfilter (lambda (x) (< x pivot)) list))
			(myfilter  (lambda (x) (eq? x pivot)) list)
			(quicksort (myfilter  (lambda (x) (> x pivot)) list))))))
			
; Usage
(quicksort '(8 5 2 3 1))